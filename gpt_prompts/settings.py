"""
Django settings for gpt_prompts project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Set the allowed hosts of the project
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='', cast=Csv())


# Application definition

# Add prompts and accounts to installed apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',

    # Third-party apps
    'django_filters',
    'star_ratings',
    # 'coupons',
    # 'feedback',
    # 'markdownx',
    'mdeditor',
    'bootstrap4',
    'fontawesome_5',
    # 'social_django',
    'rosetta',
    'paypal.standard.ipn',
    'djstripe',

    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Custom apps
    'prompts',
    # 'accounts',
]

# Add middleware classes
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Middleware class for language detection
    'django.middleware.locale.LocaleMiddleware',
]

# Set the root URL configuration
ROOT_URLCONF = 'gpt_prompts.urls'

# Set the template directories
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # `allauth` needs this from django
                'django.template.context_processors.request',

                # Context processor for social authentication
                # 'social_django.context_processors.backends',
                # 'social_django.context_processors.login_redirect',
            ],
        },
    },
]

# Set the WSGI application
WSGI_APPLICATION = 'gpt_prompts.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# Set the database configuration
if config('DB', default='sqlite3') == 'sqlite3':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif config('DB', default='sqlite3') in [ 'mysql', 'postgresql' ]:
    DATABASES = {
        'default': {
            'ENGINE': config('DB_ENGINE'),
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST'),
        }
    }
# elif config('DB', default='sqlite3') == 'postgresql':
#     DATABASES = {
#         # Default database configuration
#         'default': {
#             # Use PostgreSQL as database engine
#             'ENGINE': 'django.db.backends.postgresql_psycopg2',

#             # Set database name, user, password, and host from environment variables
#             'NAME': os.environ.get('DB_NAME'),
#             'USER': os.environ.get('DB_USER'),
#             'PASSWORD': os.environ.get('DB_PASSWORD'),
#             'HOST': os.environ.get('DB_HOST'),
#         }
#     }


# Set the authentication backends
AUTHENTICATION_BACKENDS = (
    # Default authentication backend
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',

    # # Authentication backends for social accounts
    # 'social_core.backends.google.GoogleOAuth2',
    # 'social_core.backends.microsoft.MicrosoftOAuth2',
    # 'social_core.backends.wechat.WeChatOAuth2',
)

# # Set the social authentication keys and secrets from environment variables
# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('GOOGLE_OAUTH2_KEY')
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('GOOGLE_OAUTH2_SECRET')
# SOCIAL_AUTH_MICROSOFT_GRAPH_KEY = os.environ.get('MICROSOFT_OAUTH2_KEY')
# SOCIAL_AUTH_MICROSOFT_GRAPH_SECRET = os.environ.get('MICROSOFT_OAUTH2_SECRET')
# SOCIAL_AUTH_WECHAT_OAUTH2_KEY = os.environ.get('WECHAT_OAUTH2_KEY')
# SOCIAL_AUTH_WECHAT_OAUTH2_SECRET = os.environ.get('WECHAT_OAUTH2_SECRET')

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Set the login URL and redirect URL for social authentication
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = 'home'

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

# Set the available languages for the website
LANGUAGES = (
    ('en', 'English'),
    # ('zh-Hans', 'Chinese'),
    ('zh-hans', 'Chinese'),
)

# Set the locale paths for the translation files
LOCALE_PATHS = (
    BASE_DIR / 'locale',
)

# Set the use of internationalization and localization
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# Set the static files directory
STATIC_URL = '/static/'
if DEBUG:
    STATICFILES_DIRS = (
        BASE_DIR / 'static',
    )
else:
    STATIC_ROOT = BASE_DIR / 'static'

# Set the media files directory
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Login
# LOGIN_URL = '/login/'

# allauth
# LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
# ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = LOGIN_REDIRECT_URL
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_CONFIRM_EMAIL_ON_GET = False
ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE =False
ACCOUNT_LOGOUT_ON_GET = False
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False
# ACCOUNT_LOGOUT_REDIRECT_URL = '/login/'
ACCOUNT_PRESERVE_USERNAME_CASING = True
ACCOUNT_SESSION_REMEMBER = None
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_USERNAME_REQUIRED=True
ACCOUNT_USERNAME_BLACKLIST = ["admin", "god", "root"]
ACCOUNT_USERNAME_MIN_LENGTH = 2
ACCOUNT_ADAPTER="allauth.account.adapter.DefaultAccountAdapter"

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = "django_sendmail_backend.backends.EmailBackend"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# mdeditor setting
X_FRAME_OPTIONS = 'SAMEORIGIN'
MDEDITOR_CONFIGS = {
    'default':{
        'width': '100% ',  # Custom edit box width
        'height': 500,  # Custom edit box height
        'toolbar': ["undo", "redo", "|",
                    "bold", "italic",
                    "h2", "h3", "h4", "h5", "|",
                    "list-ul", "list-ol", "hr", "|",
                    "link", "image", "code", "code-block", "table", "datetime",
                    "emoji", "html-entities", "|",
                    "help"
                    ],  # custom edit box toolbar
        'upload_image_formats': ["jpg", "jpeg", "gif", "png", "bmp", "webp"],  # image upload format type
        'image_folder': 'editor',  # image save the folder name
        'theme': 'default',  # edit box theme, dark / default
        'preview_theme': 'default',  # Preview area theme, dark / default
        'editor_theme': 'default',  # edit area theme, pastel-on-dark / default
        'toolbar_autofixed': True,  # Whether the toolbar capitals
        'search_replace': True,  # Whether to open the search for replacement
        'emoji': True,  # whether to open the expression function
        'tex': True,  # whether to open the tex chart function
        'flow_chart': True,  # whether to open the flow chart function
        'sequence': True, # Whether to open the sequence diagram function
        'watch': True,  # Live preview
        'lineWrapping': False,  # lineWrapping
        'lineNumbers': False,  # lineNumbers
        'language': 'en'  # zh / en / es
    }
}

# # Set the PayPal settings from environment variables
# PAYPAL_RECEIVER_EMAIL = os.environ.get('PAYPAL_RECEIVER_EMAIL')
# PAYPAL_TEST = os.environ.get('PAYPAL_TEST', False)

# # Set the Stripe settings from environment variables
# STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY')
# STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"

# # Set the WeChat Pay settings from environment variables
# WECHAT_PAY_APPID = os.environ.get('WECHAT_PAY_APPID')
# WECHAT_PAY_MCH_ID = os.environ.get('WECHAT_PAY_MCH_ID')
# WECHAT_PAY_API_KEY = os.environ.get('WECHAT_PAY_API_KEY')
# WECHAT_PAY_NOTIFY_URL = os.environ.get('WECHAT_PAY_NOTIFY_URL')


SITE_ID = 1